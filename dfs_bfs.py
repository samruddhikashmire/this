# -*- coding: utf-8 -*-
"""dfs/bfs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KJ3SRkufd1kshiErHdSxaJuM5yyIeXaK
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile main.cpp
# #include<bits/stdc++.h>
# using namespace std;
# 
# class Graph
# {
#     int v ;
#     vector<vector<int>>adj;
# 
#     public:
#     Graph(int a) : v(a) , adj(a) {}
# 
#     void addEdge(int v , int w)
#     {
#         adj[v].push_back(w);
#     }
# 
#     void parallelDFS (int startVertex)
#     {
#         vector<bool>visited(v, false);
#         DFS(startVertex , visited);
#     }
# 
#     void DFS(int startVertex , vector<bool>&visited)
#     {
#         visited[startVertex] = true;
#         cout<<startVertex<<" ";
# 
#         #pragma omp parallel for
#         for(int i=0; i < adj[startVertex].size() ; i++)
#         {
#             int curr = adj[startVertex][i];
#             if(visited[curr]!=true)
#             {
#                 DFS(curr , visited);
#             }
#         }
#     }
# 
# 
#     void parallelBFS (int startVertex)
#     {
#         vector<bool>visited(v, false);
#         queue<int>q;
# 
#         visited[startVertex] = true;
#         q.push(startVertex);
# 
#         while(!q.empty())
#         {
#             int curr = q.front();
#             q.pop();
#             cout<<curr<<" ";
# 
#             #pragma omp parallel for
#             for(int i=0; i <adj[curr].size() ; i++)
#             {
#                 int temp = adj[curr][i];
#                 if(visited[temp]!=true)
#                 {
#                     visited[temp] = true;
#                     q.push(temp);
#                 }
#             }
#         }
#     }
# };
# 
# int main()
# {
#     Graph g(7);
#     g.addEdge(0,1);
#     g.addEdge(0,2);
#     g.addEdge(1,3);
#     g.addEdge(1,4);
#     g.addEdge(2,5);
#     g.addEdge(2,6);
# 
#     cout << "Depth-First Search (DFS): ";
#     g.parallelDFS(0);
#     cout << endl;
# 
#     cout << "Breadth-First Search (BFS): ";
#     g.parallelBFS(0);
#     cout << endl;
# 
#     return 0;
# 
# }
#

!g++ -fopenmp main.cpp -o main

!./main

